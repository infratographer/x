{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "eventhooks/hooks" }}
	{{ with extend $ "Package" "eventhooks" }}
		{{ template "header" . }}
	{{ end }}

	{{ $genPackage := base $.Config.Package }}

	import "go.infratographer.com/permissions-api/pkg/permissions"

	{{- range $node := $.Nodes }}
		{{- if $nodeAnnotation := $node.Annotations.INFRA9_EVENTHOOKS }}
		{{- if ne $nodeAnnotation.SubjectName "" }}
			func {{ $node.Name }}Hooks() []ent.Hook {
				return []ent.Hook{
				hook.On(
					func(next ent.Mutator) ent.Mutator {
						return hook.{{ $node.Name }}Func(func(ctx context.Context, m *generated.{{ $node.Name }}Mutation) (ent.Value, error) {
							var err error
							additionalSubjects := []gidx.PrefixedID{}
							relationships := []events.AuthRelationshipRelation{}

							objID, ok := m.{{ $node.ID.MutationGet }}()
							if !ok {
								return nil, fmt.Errorf("object doesn't have an id %s", objID)
							}

							changeset := []events.FieldChange{}

							{{- range $f := $node.Fields }}
								{{- if $f.Sensitive }}
									// sensitive field, only return <redacted>
									_, ok = m.{{ $f.MutationGet }}()
									if ok {
										changeset = append(changeset, events.FieldChange{
											Field:         "{{ $f.Name | camel }}",
											PreviousValue: "<redacted>",
											CurrentValue:  "<redacted>",
										})
								{{- else }}
									{{- $currentValue := print "cv_" $f.Name }}
									{{ $currentValue }} := ""
									{{ $f.Name }}, ok := m.{{ $f.MutationGet }}()
									{{- $annotation := $f.Annotations.INFRA9_EVENTHOOKS }}
									{{- if $annotation.AdditionalSubjectRelation }}
										if !ok && !m.Op().Is(ent.OpCreate) {
											// since we are doing an update or delete and these fields didn't change, load the "old" value
											{{ $f.Name }}, err = m.{{ $f.MutationGetOld }}(ctx)
											if err != nil {
												return nil, err
											}
										}
										{{- if $f.Optional }}
											if {{ $f.Name }} != gidx.NullPrefixedID {
												additionalSubjects = append(additionalSubjects, {{ $f.Name }})

												relationships = append(relationships, events.AuthRelationshipRelation{
													Relation:  "{{ $annotation.AdditionalSubjectRelation }}",
													SubjectID: {{ $f.Name }},
												})
											}
										{{- else }}
											additionalSubjects = append(additionalSubjects, {{ $f.Name }})

											relationships = append(relationships, events.AuthRelationshipRelation{
												Relation:  "{{ $annotation.AdditionalSubjectRelation }}",
												SubjectID: {{ $f.Name }},
											})
										{{- end }}
									{{ end }}

									if ok {
										{{- if $f.Sensitive }}
											changeset = append(changeset, events.FieldChange{
												Field:         "{{ $f.Name | camel }}",
												PreviousValue: "<sensitive>",
												CurrentValue:  "<sensitive>",
											})
										{{- else }}
											{{- if $f.IsTime }}
												{{ $currentValue }} = {{ $f.Name }}.Format(time.RFC3339)
											{{- else if $f.HasValueScanner }}
												{{ $currentValue }} = {{ $f.Name }}.Value()
											{{- else }}
												{{ $currentValue }} = fmt.Sprintf("%s", fmt.Sprint({{ $f.Name }}))
											{{- end }}

											{{- $prevVar := print "pv_" $f.Name }}
											{{ $prevVar }} := ""
											if !m.Op().Is(ent.OpCreate) {
												ov, err := m.{{ $f.MutationGetOld }}(ctx)
												if err != nil {
													{{ $prevVar }} = "<unknown>"
												} else {
													{{- if $f.IsTime }}
													{{ $prevVar }} = ov.Format(time.RFC3339)
													{{- else if $f.HasValueScanner }}
													{{ $prevVar }} = ov.Value()
													{{- else }}
													{{ $prevVar }} = fmt.Sprintf("%s", fmt.Sprint(ov))
													{{- end }}
												}
											}

											changeset = append(changeset, events.FieldChange{
												Field:         "{{ $f.Name }}",
												PreviousValue: {{ $prevVar }},
												CurrentValue: {{ $currentValue }},
											})
										{{- end }}
									}
								{{ end }}
							{{ end }}

						msg := events.ChangeMessage{
							EventType:            eventType(m.Op()),
							SubjectID:            objID,
							AdditionalSubjectIDs: additionalSubjects,
							Timestamp:            time.Now().UTC(),
							FieldChanges:         changeset,
						}

						// complete the mutation before we process the event
							retValue, err := next.Mutate(ctx, m)
							if err != nil {
								return retValue, err
							}

						if len(relationships) != 0 {
							if err := permissions.CreateAuthRelationships(ctx, "{{ $nodeAnnotation.SubjectName }}", objID, relationships...); err != nil {
								return nil, fmt.Errorf("relationship request failed with error: %w", err)
							}
						}

						if _, err := m.EventsPublisher.PublishChange(ctx, "{{ $nodeAnnotation.SubjectName }}", msg); err != nil {
							return nil, fmt.Errorf("failed to publish change: %w", err)
						}

							return retValue, nil
						})},
					ent.OpCreate|ent.OpUpdate|ent.OpUpdateOne,
				),

				// Delete Hook
				hook.On(
					func(next ent.Mutator) ent.Mutator {
						return hook.{{ $node.Name }}Func(func(ctx context.Context, m *generated.{{ $node.Name }}Mutation) (ent.Value, error) {
							additionalSubjects := []gidx.PrefixedID{}
							relationships := []events.AuthRelationshipRelation{}

							objID, ok := m.{{ $node.ID.MutationGet }}()
							if !ok {
								return nil, fmt.Errorf("object doesn't have an id %s", objID)
							}

							dbObj, err := m.Client().{{ $node.Name }}.Get(ctx, objID)
							if err != nil {
								return nil, fmt.Errorf("failed to load object to get values for event, err %w", err)
							}

							{{- range $f := $node.Fields }}
								{{- if not $f.Sensitive }}
									{{- $annotation := $f.Annotations.INFRA9_EVENTHOOKS }}
									{{- if $annotation.AdditionalSubjectRelation }}
										{{- if $f.Optional }}
											if dbObj.{{ $f.MutationGet }} != gidx.NullPrefixedID {
												additionalSubjects = append(additionalSubjects, dbObj.{{ $f.MutationGet }})

												relationships = append(relationships, events.AuthRelationshipRelation{
													Relation:  "{{ $annotation.AdditionalSubjectRelation }}",
													SubjectID: dbObj.{{ $f.MutationGet }},
												})
											}
										{{- else }}
											additionalSubjects = append(additionalSubjects, dbObj.{{ $f.MutationGet }})

											relationships = append(relationships, events.AuthRelationshipRelation{
												Relation:  "{{ $annotation.AdditionalSubjectRelation }}",
												SubjectID: dbObj.{{ $f.MutationGet }},
											})
										{{- end }}
									{{ end }}
								{{ end }}
							{{ end }}

						// we have all the info we need, now complete the mutation before we process the event
							retValue, err := next.Mutate(ctx, m)
							if err != nil {
								return retValue, err
							}

						if len(relationships) != 0 {
							if err := permissions.DeleteAuthRelationships(ctx, "{{ $nodeAnnotation.SubjectName }}", objID, relationships...); err != nil {
								return nil, fmt.Errorf("relationship request failed with error: %w", err)
							}
						}

						msg := events.ChangeMessage{
							EventType:            eventType(m.Op()),
							SubjectID:            objID,
							AdditionalSubjectIDs: additionalSubjects,
							Timestamp:            time.Now().UTC(),
						}

						if _, err := m.EventsPublisher.PublishChange(ctx, "{{ $nodeAnnotation.SubjectName }}", msg); err != nil {
							return nil, fmt.Errorf("failed to publish change: %w", err)
						}

							return retValue, nil
						})},
					ent.OpDelete|ent.OpDeleteOne,
				),
			}
		}
			{{- end }}
			{{- end }}
	{{- end }}

	func EventHooks(c *{{ $genPackage }}.Client) {
		{{- range $node := $.Nodes }}
			{{- if $nodeAnnotation := $node.Annotations.INFRA9_EVENTHOOKS }}
				{{- if ne $nodeAnnotation.SubjectName "" }}
					c.{{ $node.Name }}.Use({{ $node.Name }}Hooks()...)
				{{ end }}
			{{ end }}
		{{ end }}
	}

	func eventType(op ent.Op) string {
		switch op {
		case ent.OpCreate:
			return string(events.CreateChangeType)
		case ent.OpUpdate, ent.OpUpdateOne:
			return string(events.UpdateChangeType)
		case ent.OpDelete, ent.OpDeleteOne:
			return string(events.DeleteChangeType)
		default:
			return "unknown"
		}
	}


{{ end }}
